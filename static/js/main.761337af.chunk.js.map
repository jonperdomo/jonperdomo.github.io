{"version":3,"sources":["main.jpg","Widget.js","App.js","reportWebVitals.js","index.js"],"names":["Widget","canvasRef","useRef","useEffect","canvas","current","renderer","THREE","camera","position","z","scene","geometry","cubes","material1","color","material2","cube1","cube2","add","push","requestAnimationFrame","render","time","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","forEach","cube","ndx","rot","rotation","x","y","_jsx","ref","App","className","children","_jsxs","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.761337af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/main.965b41d9.jpg\";","import React, { useEffect, useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\n// Define the Widget component\r\nconst Widget = () => {\r\n  const canvasRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const renderer = new THREE.WebGLRenderer({ canvas });\r\n\r\n    const fov = 75;\r\n    const aspect = 2; // the canvas default\r\n    const near = 0.1;\r\n    const far = 5;\r\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n    camera.position.z = 2;\r\n\r\n    const scene = new THREE.Scene();\r\n\r\n    const boxWidth = 1;\r\n    const boxHeight = 1;\r\n    const boxDepth = 1;\r\n    const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\r\n\r\n    const cubes = []; // just an array we can use to rotate the cubes\r\n\r\n    // Create a basic green material\r\n    const material1 = new THREE.MeshBasicMaterial({ color: 0x44aa88 });\r\n\r\n    // Create a basic blue material\r\n    const material2 = new THREE.MeshBasicMaterial({ color: 0x0007FAE });\r\n\r\n    // Create two textured cubes\r\n    const cube1 = new THREE.Mesh(geometry, material1);\r\n    const cube2 = new THREE.Mesh(geometry, material2);\r\n    scene.add(cube1);\r\n    scene.add(cube2);\r\n    cubes.push(cube1);\r\n    cubes.push(cube2);\r\n\r\n    function resizeRendererToDisplaySize(renderer) {\r\n      const canvas = renderer.domElement;\r\n      const width = canvas.clientWidth;\r\n      const height = canvas.clientHeight;\r\n      const needResize = canvas.width !== width || canvas.height !== height;\r\n      if (needResize) {\r\n        renderer.setSize(width, height, false);\r\n      }\r\n      return needResize;\r\n    }\r\n\r\n    function render(time) {\r\n      time *= 0.001; // convert time to seconds\r\n\r\n      if (resizeRendererToDisplaySize(renderer)) {\r\n        const canvas = renderer.domElement;\r\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n        camera.updateProjectionMatrix();\r\n      }\r\n\r\n      cubes.forEach((cube, ndx) => {\r\n        const speed = 1 + ndx * 0.1;\r\n        const rot = time * speed;\r\n        cube.rotation.x = rot;\r\n        cube.rotation.y = rot;\r\n      });\r\n\r\n      renderer.render(scene, camera);\r\n\r\n      requestAnimationFrame(render);\r\n    }\r\n    requestAnimationFrame(render);\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\n// Export the Widget component\r\nexport default Widget;\r\n","import logo from './main.jpg';\r\nimport Widget from './Widget';\r\nimport './App.css';\r\n\r\n// Create the about text variable\r\nvar aboutText = \"I am a PhD candidate at Drexel University School of Biomedical Engineering. I am advised by Dr. Kai Wang at the Children's Hospital of Philadelphia and co-advised by Dr. Ming Xiao at Drexel. I work on developing computational tools for human genome analysis. I received my B.A. in Biology with a minor in Computer Science from UNC-Chapel Hill in 2015. I also have previous experience in preclinical ultrasound imaging research at SonoVol, Inc. (now part of PerkinElmer).\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <p>\r\n        <u>Jonathan Elliot Perdomo</u>\r\n        </p>\r\n        <div className=\"About-section\">\r\n            <p>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            {aboutText}\r\n            </p>\r\n        </div>\r\n\r\n        <p className=\"Personal-info\">\r\n            <u>Software and Publications</u><br/>\r\n            GitHub Profile: <a\r\n              className=\"App-link\"\r\n              href=\"https://github.com/jonperdomo\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              jonperdomo\r\n            </a>\r\n            <br/>\r\n\r\n            Publications: <a\r\n              className=\"App-link\"\r\n              href=\"https://scholar.google.com/citations?view_op=list_works&hl=en&user=CJ1ahuoAAAAJ\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              Google Scholar\r\n            </a>\r\n        </p>\r\n\r\n        <p className=\"Personal-info\">\r\n            <u>Contact info</u><br/>\r\n\r\n            Email: <a\r\n              className=\"App-link\"\r\n              href=\"mailto:jep353@drexel.edu\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              jep353@drexel.edu\r\n            </a>\r\n            <br/>\r\n\r\n            Twitter: <a\r\n              className=\"App-link\"\r\n              href=\"https://twitter.com/jep353\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              @jep353\r\n            </a>\r\n        </p>\r\n        <Widget />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// Render the App component in the DOM\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('grid-item-1')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}