{"version":3,"sources":["main.jpg","Widget.js","App.js","reportWebVitals.js","index.js"],"names":["Widget","canvasRef","useRef","useEffect","canvas","current","renderer","THREE","camera","position","z","scene","background","geometry","cubes","material","color","wireframe","cube1","add","push","requestAnimationFrame","render","time","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","forEach","cube","ndx","rot","rotation","x","y","ref","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qMAAe,G,MAAA,IAA0B,kC,OCiF1BA,EA7EA,WACb,IAAMC,EAAYC,mBAwElB,OAtEAC,qBAAU,WACR,IAAMC,EAASH,EAAUI,QACnBC,EAAW,IAAIC,IAAoB,CAAEH,WAMrCI,EAAS,IAAID,IAJP,GACG,EACF,GACD,GAEZC,EAAOC,SAASC,EAAI,EAEpB,IAAMC,EAAQ,IAAIJ,IAClBI,EAAMC,WAAa,IAAIL,IAAY,SAEnC,IAUMM,EAAW,IAAIN,IAJD,GACD,GACI,GACC,IAIlBO,EAAQ,GAGRC,EAAW,IAAIR,IAAwB,CAAES,MAAO,SAAUC,WAAW,IAGrEC,EAAQ,IAAIX,IAAWM,EAAUE,GACvCJ,EAAMQ,IAAID,GACVJ,EAAMM,KAAKF,GAgCXG,uBAnBA,SAASC,EAAOC,GAGd,GAFAA,GAAQ,KAZV,SAAqCjB,GACnC,IAAMF,EAASE,EAASkB,WAClBC,EAAQrB,EAAOsB,YACfC,EAASvB,EAAOwB,aAChBC,EAAazB,EAAOqB,QAAUA,GAASrB,EAAOuB,SAAWA,EAI/D,OAHIE,GACFvB,EAASwB,QAAQL,EAAOE,GAAQ,GAE3BE,CACR,CAKKE,CAA4BzB,GAAW,CACzC,IAAMF,EAASE,EAASkB,WACxBhB,EAAOwB,OAAS5B,EAAOsB,YAActB,EAAOwB,aAC5CpB,EAAOyB,wBACR,CAEDnB,EAAMoB,SAAQ,SAACC,EAAMC,GACnB,IAAMC,EAAa,GAAPd,EACZY,EAAKG,SAASC,EAAIF,EAClBF,EAAKG,SAASE,EAAIH,CACnB,IAED/B,EAASgB,OAAOX,EAAOH,GAEvBa,sBAAsBC,EACvB,GAEF,GAAE,IAEI,wBAAQmB,IAAKxC,GACrB,E,MCPcyC,MAhEf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACA,4BACE,0DAEA,qBAAKA,UAAU,gBAAf,SACI,8BACA,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SAXrC,8dAgBR,oBAAGH,UAAU,gBAAb,UACI,0DAAgC,uBADpC,mBAEoB,mBACdA,UAAU,WACVI,KAAK,gCACLC,OAAO,SACPC,IAAI,sBAJU,wBAQhB,uBAVJ,iBAYkB,mBACZN,UAAU,WACVI,KAAK,kFACLC,OAAO,SACPC,IAAI,sBAJQ,+BAUlB,oBAAGN,UAAU,gBAAb,UACI,6CAAmB,uBADvB,UAGW,mBACLA,UAAU,WACVI,KAAK,2BACLC,OAAO,SACPC,IAAI,sBAJC,+BAQP,uBAXJ,YAaa,mBACPN,UAAU,WACVI,KAAK,6BACLC,OAAO,SACPC,IAAI,sBAJG,wBASb,cAAC,EAAD,QAIP,ECzDcC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECHDQ,IAASrC,OACP,cAAC,IAAMsC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,gBAM1BZ,G","file":"static/js/main.3e83d905.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/main.965b41d9.jpg\";","import React, { useEffect, useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\n// Define the Widget component\r\nconst Widget = () => {\r\n  const canvasRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const renderer = new THREE.WebGLRenderer({ canvas });\r\n\r\n    const fov = 75;\r\n    const aspect = 2; // the canvas default\r\n    const near = 0.1;\r\n    const far = 5;\r\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n    camera.position.z = 2;\r\n\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x282c34);  // dark grey\r\n\r\n    const boxWidth = 1;\r\n    const boxHeight = 1;\r\n    const boxDepth = 1;\r\n    //const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\r\n\r\n    // Create a torus\r\n    const radiusTorus = .8;\r\n    const tubeRadius = 0.4;\r\n    const radialSegments = 12;\r\n    const tubularSegments = 24;\r\n    const geometry = new THREE.TorusGeometry(\r\n      radiusTorus, tubeRadius, radialSegments, tubularSegments);\r\n\r\n    const cubes = []; // just an array we can use to rotate the cubes\r\n\r\n    // Create a basic white material\r\n    const material = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });\r\n\r\n    // Create cubes\r\n    const cube1 = new THREE.Mesh(geometry, material);\r\n    scene.add(cube1);\r\n    cubes.push(cube1);\r\n\r\n    function resizeRendererToDisplaySize(renderer) {\r\n      const canvas = renderer.domElement;\r\n      const width = canvas.clientWidth;\r\n      const height = canvas.clientHeight;\r\n      const needResize = canvas.width !== width || canvas.height !== height;\r\n      if (needResize) {\r\n        renderer.setSize(width, height, false);\r\n      }\r\n      return needResize;\r\n    }\r\n\r\n    function render(time) {\r\n      time *= 0.001; // convert time to seconds\r\n\r\n      if (resizeRendererToDisplaySize(renderer)) {\r\n        const canvas = renderer.domElement;\r\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n        camera.updateProjectionMatrix();\r\n      }\r\n\r\n      cubes.forEach((cube, ndx) => {\r\n        const rot = time * 0.3;\r\n        cube.rotation.x = rot;\r\n        cube.rotation.y = rot;\r\n      });\r\n\r\n      renderer.render(scene, camera);\r\n\r\n      requestAnimationFrame(render);\r\n    }\r\n    requestAnimationFrame(render);\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} />;\r\n};\r\n\r\n// Export the Widget component\r\nexport default Widget;\r\n","import logo from './main.jpg';\r\nimport Widget from './Widget';\r\nimport './App.css';\r\n\r\n// Create the about text variable\r\nvar aboutText = \"I am a PhD candidate at Drexel University School of Biomedical Engineering. I am advised by Dr. Kai Wang at the Children's Hospital of Philadelphia and co-advised by Dr. Ming Xiao at Drexel. I work on developing computational tools for human genome analysis. I received my B.A. in Biology with a minor in Computer Science from UNC-Chapel Hill in 2015. I also have previous experience in preclinical ultrasound imaging research at SonoVol, Inc. (now part of PerkinElmer).\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <p>\r\n        <u>Jonathan Elliot Perdomo</u>\r\n        </p>\r\n        <div className=\"About-section\">\r\n            <p>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            {aboutText}\r\n            </p>\r\n        </div>\r\n\r\n        <p className=\"Personal-info\">\r\n            <u>Software and Publications</u><br/>\r\n            GitHub Profile: <a\r\n              className=\"App-link\"\r\n              href=\"https://github.com/jonperdomo\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              jonperdomo\r\n            </a>\r\n            <br/>\r\n\r\n            Publications: <a\r\n              className=\"App-link\"\r\n              href=\"https://scholar.google.com/citations?view_op=list_works&hl=en&user=CJ1ahuoAAAAJ\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              Google Scholar\r\n            </a>\r\n        </p>\r\n\r\n        <p className=\"Personal-info\">\r\n            <u>Contact info</u><br/>\r\n\r\n            Email: <a\r\n              className=\"App-link\"\r\n              href=\"mailto:jep353@drexel.edu\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              jep353@drexel.edu\r\n            </a>\r\n            <br/>\r\n\r\n            Twitter: <a\r\n              className=\"App-link\"\r\n              href=\"https://twitter.com/jep353\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n                >\r\n              @jep353\r\n            </a>\r\n        </p>\r\n        <Widget />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// Render the App component in the DOM\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('grid-item-1')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}